# yaml-language-server: $schema=https://raw.githubusercontent.com/swarmlibs/dockerstack-schema/main/schema/dockerstack-spec.json

x-healthcheck: &x-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

x-deploy: &x-deploy
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - node.role == manager

x-prometheus-helpers-deploy: &x-prometheus-helpers-deploy
  mode: global
  resources:
    limits:
      memory: 64M
  placement:
    constraints:
      - node.labels.services.promstack_prometheus_server == true

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

services:

  # ====================================================
  # Prometheus
  # https://github.com/prometheus/prometheus
  # ====================================================

  prometheus:
    image: ${PROMSTACK_PROMETHEUS_GENCONFIG_VERSION}
    command:
      - --verbose
      - --file=/run/configs/prometheus.yml.tmpl
      - --out=/prometheus-configs.d/prometheus.yml
    environment:
      # Remote write
      - PROMETHEUS_REMOTE_WRITE_ENABLED=$${PROMETHEUS_REMOTE_WRITE_ENABLED:-false}
      - PROMETHEUS_REMOTE_WRITE_URL=$${PROMETHEUS_REMOTE_WRITE_URL:-false}
      # Alertmanager
      - PROMETHEUS_ALERTMANAGER_ENABLED=$${PROMETHEUS_ALERTMANAGER_ENABLED:-false}
      - PROMETHEUS_ALERTMANAGER_ADDR=$${PROMETHEUS_ALERTMANAGER_ADDR}
      - PROMETHEUS_ALERTMANAGER_PORT=$${PROMETHEUS_ALERTMANAGER_PORT:-9094}
      # Prometheus cluster settings
      - PROMETHEUS_CLUSTER_NAME=$${PROMETHEUS_CLUSTER_NAME:-primary}
      - PROMETHEUS_CLUSTER_REPLICA=$${PROMETHEUS_CLUSTER_REPLICA:-replica-{{.Task.Slot}}}
    configs:
      # Prometheus config template
      - source: prometheus-config-tmpl
        target: /run/configs/prometheus.yml.tmpl
      # Prometheus's rule files
      - source: prometheus-dockerswarm-nodes-rule
      - source: prometheus-dockerswarm-services-rule
      # Prometheus's scrape config files
      - source: prometheus-prometheus
    volumes:
      - type: volume
        source: prometheus-configs
        target: /prometheus-configs.d
    logging: *x-default-logging
    stop_grace_period: 5s
    deploy:
      <<: *x-prometheus-helpers-deploy
      restart_policy:
        condition: any
        # max_attempts: 15
        delay: 15s
        window: 10s
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2

  prometheus-server:
    image: ${PROMSTACK_PROMETHEUS_VERSION}
    command:
      - --enable-feature=native-histograms
      - --config.file=/prometheus-configs.d/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=182d
      - --web.page-title=Prometheus Server - Promstack
      - --web.enable-lifecycle
      - --web.enable-remote-write-receiver
      - --log.level=info
    user: "0:0"
    ports:
      - published: 9090
        target: 9090
        protocol: tcp
    networks:
      public:
        aliases:
          - prometheus.svc.cluster.local
      grafana:
        aliases:
          - prometheus.svc.cluster.local
      prometheus:
        aliases:
          - prometheus.internal
          - prometheus.svc.cluster.local
      prometheus_gwnetwork:
        aliases:
          - prometheus.internal
          - prometheus.svc.cluster.local
      prometheus_internal:
        aliases:
          - prometheus.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    hostname: replica-{{.Node.ID}}.prometheus.internal
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: volume
        source: prometheus-configs
        target: /prometheus-configs.d
      - type: volume
        source: prometheus
        target: /prometheus
    healthcheck:
      <<: *x-healthcheck
      test: wget -qO - --tries=1 --spider http://127.0.0.1:9090/-/healthy || exit 1
    logging: *x-default-logging
    deploy:
      <<: *x-deploy
      labels:
        io.prometheus.role: "prometheus"
        io.prometheus.dockerswarm-tasks.should_be_scraped: "false"
        io.prometheus.dockerswarm-services.should_be_probed: "false"
      restart_policy:
        condition: any
        max_attempts: 15
        delay: 30s
        window: 15s
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
    depends_on:
      - prometheus

  prometheus-scrape-config-provider: &prometheus-config-provider-service
    image: ${PROMSTACK_PROMETHEUS_CONFIG_PROVIDER_VERSION}
    command:
      - --output-dir=/prometheus-configs.d/scrape-configs
    volumes:
      - type: volume
        source: prometheus-configs
        target: /prometheus-configs.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    logging: *x-default-logging
    deploy:
      <<: *x-prometheus-helpers-deploy
      labels:
        io.prometheus.role: "prometheus-config-provider"
      restart_policy:
        condition: any
        # max_attempts: 15
        delay: 15s
        window: 10s
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
    
  prometheus-rule-provider:
    <<: *prometheus-config-provider-service
    command:
      - --output-dir=/prometheus-configs.d/rules
      - --prometheus-scrape-config-label=io.prometheus.rule

  prometheus-config-reloader:
    image: ${PROMSTACK_PROMETHEUS_CONFIG_RELOADER_VERSION}
    entrypoint: ["/docker-entrypoint-shim.sh"]
    environment:
      - RELOADER_CONFIG_FILE=/prometheus-configs.d/prometheus.yml
      - RELOADER_WATCH_DIR=/prometheus-configs.d
      - RELOADER_WATCH_INTERVAL=15s
      - RELOADER_RELOAD_TIMEOUT=10s
      - PROMETHEUS_HOST=replica-{{.Node.ID}}.prometheus.internal
    networks:
      prometheus_internal:
    configs:
      - source: prometheus-config-reloader-entrypoint
        target: /docker-entrypoint-shim.sh
        mode: 0555
    volumes:
      - type: volume
        source: prometheus-configs
        target: /prometheus-configs.d
    logging: *x-default-logging
    deploy:
      <<: *x-prometheus-helpers-deploy
      labels:
        io.prometheus.role: "prometheus-config-reloader"
        io.prometheus.enabled: "true"
        io.prometheus.job_name: "prometheus-config-reloader"
        io.prometheus.scrape_port: "8080"
        io.prometheus.dockerswarm-services.should_be_probed: "false"
      restart_policy:
        condition: any
        delay: 30s
        window: 15s
      rollback_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
        monitor: 15s
        max_failure_ratio: 0.2
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
        monitor: 15s
        max_failure_ratio: 0.2
    depends_on:
      - prometheus
      - prometheus-server
      - prometheus-scrape-config-provider

volumes:
  prometheus:
  prometheus-configs:

networks:
  public: # The 3rd-party ingress network
    name: public
    external: true
  grafana:
    # Internal network for Grafana services
  prometheus:
    name: prometheus
    external: true
  prometheus_gwnetwork:
    name: prometheus_gwnetwork
    external: true
  prometheus_internal:
    internal: true

configs:
  # Prometheus config files
  prometheus-config-tmpl:
    name: prometheus-config-tmpl-v1
    file: ./prometheus/prometheus.yml.tmpl

  # prometheus-config-reloader
  prometheus-config-reloader-entrypoint:
    name: prometheus-config-reloader-entrypoint-v1
    file: ./prometheus-config-reloader/docker-entrypoint-shim.sh

  # prometheus's rule files
  prometheus-dockerswarm-nodes-rule:
    name: prometheus-dockerswarm-nodes-rule-v1
    file: ./prometheus/rules/dockerswarm-nodes.yml
    labels:
      io.prometheus.rule: "true"
  prometheus-dockerswarm-services-rule:
    name: prometheus-dockerswarm-services-rule-v1
    file: ./prometheus/rules/dockerswarm-tasks.yml
    labels:
      io.prometheus.rule: "true"

  # Prometheus's scrape config files
  prometheus-prometheus:
    name: prometheus-prometheus-v1
    file: ./prometheus/scrape-configs/prometheus.yml
    labels:
      io.prometheus.scrape_config: "true"

services:
  grafana:
    command:
    - sleep
    - infinity
    configs:
    - source: gf-dashboard-promstack-grafana-metrics
    - source: gf-dashboard-promstack-prometheus-stats
    - source: gf-dashboard-promstack-prometheus-stats-v2
    - source: gf-dashboard-promstack-dockerstack
    - source: gf-dashboard-promstack-dockerswarm-nodes
    - source: gf-dashboard-promstack-dockerswarm-services
    - source: gf-dashboard-promstack-cadvisor
    - source: gf-dashboard-promstack-node-exporter
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
        max_replicas_per_node: 1
    image: busybox:latest
  grafana-dashboard-provider:
    command:
    - --output-ext=json
    - --output-dir=/grafana-dashboards.d
    - --prometheus-scrape-config-label=io.grafana.dashboard
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      resources:
        limits:
          memory: "67108864"
      restart_policy:
        condition: any
        delay: 15s
        window: 10s
      placement:
        constraints:
        - node.labels.services.promstack_grafana == true
    image: docker.io/swarmlibs/prometheus-config-provider:0.1.0-rc.11
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: 12m
    volumes:
    - type: volume
      source: grafana-dashboards
      target: /grafana-dashboards.d
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true
  grafana-provisioning-alerting-provider:
    command:
    - --output-dir=/grafana-provisioning-alerting.d
    - --prometheus-scrape-config-label=io.grafana.provisioning.alerting
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      resources:
        limits:
          memory: "67108864"
      restart_policy:
        condition: any
        delay: 15s
        window: 10s
      placement:
        constraints:
        - node.labels.services.promstack_grafana == true
    image: docker.io/swarmlibs/prometheus-config-provider:0.1.0-rc.11
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: 12m
    volumes:
    - type: volume
      source: grafana-provisioning-alerting
      target: /grafana-provisioning-alerting.d
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true
  grafana-provisioning-config-reloader:
    depends_on:
    - grafana
    - grafana-dashboard-provider
    - grafana-provisioning-dashboard-provider
    - grafana-provisioning-datasource-provider
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
        order: start-first
      resources:
        limits:
          memory: "67108864"
      restart_policy:
        condition: any
        delay: 15s
        window: 10s
      placement:
        constraints:
        - node.labels.services.promstack_grafana_server == true
    environment:
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SERVER_DOMAIN: replica-{{.Node.ID}}.grafana.internal
    image: docker.io/swarmlibs/grafana-provisioning-config-reloader:0.1.0-rc.3
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: 12m
    networks:
      grafana: null
    volumes:
    - type: volume
      source: grafana-provisioning-config-reloader
      target: /data
    - type: volume
      source: grafana-provisioning-alerting
      target: /etc/grafana/provisioning/alerting
    - type: volume
      source: grafana-provisioning-dashboards
      target: /etc/grafana/provisioning/dashboards
    - type: volume
      source: grafana-provisioning-datasources
      target: /etc/grafana/provisioning/datasources
      read_only: true
  grafana-provisioning-dashboard-provider:
    command:
    - --output-dir=/grafana-provisioning-dashboards.d
    - --prometheus-scrape-config-label=io.grafana.provisioning.dashboard
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      resources:
        limits:
          memory: "67108864"
      restart_policy:
        condition: any
        delay: 15s
        window: 10s
      placement:
        constraints:
        - node.labels.services.promstack_grafana == true
    image: docker.io/swarmlibs/prometheus-config-provider:0.1.0-rc.11
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: 12m
    volumes:
    - type: volume
      source: grafana-provisioning-dashboards
      target: /grafana-provisioning-dashboards.d
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true
  grafana-provisioning-datasource-provider:
    command:
    - --output-dir=/grafana-provisioning-datasources.d
    - --prometheus-scrape-config-label=io.grafana.provisioning.datasource
    configs:
    - source: gf-provisioning-datasource-prometheus
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      rollback_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      resources:
        limits:
          memory: "67108864"
      restart_policy:
        condition: any
        delay: 15s
        window: 10s
      placement:
        constraints:
        - node.labels.services.promstack_grafana == true
    image: docker.io/swarmlibs/prometheus-config-provider:0.1.0-rc.11
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: 12m
    volumes:
    - type: volume
      source: grafana-provisioning-datasources
      target: /grafana-provisioning-datasources.d
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true
  grafana-server:
    configs:
    - source: gf-server-entrypoint
      target: /docker-entrypoint-shim.sh
      mode: 365
    - source: gf-provisioning-dashboards
      target: /etc/grafana/provisioning/dashboards/gf-provisioning-dashboards.yml
    deploy:
      mode: global
      labels:
        io.prometheus.enabled: "true"
        io.prometheus.job_name: grafana
        io.prometheus.scrape_port: "3000"
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 15s
        max_failure_ratio: 0.2
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 15
        window: 15s
      placement:
        constraints:
        - node.labels.services.promstack_grafana_provisioning_alerting_provider ==
          true
        - node.labels.services.promstack_grafana_provisioning_dashboard_provider ==
          true
        - node.labels.services.promstack_grafana_provisioning_datasource_provider
          == true
    entrypoint:
    - /docker-entrypoint-shim.sh
    environment:
      GF_DATABASE_CACHE_MODE: shared
      GF_DATABASE_WAL: "true"
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SERVER_DOMAIN: ${GF_SERVER_DOMAIN}
      GF_SERVER_PROTOCOL: ${GF_SERVER_PROTOCOL}
      GF_SERVER_ROOT_URL: ${GF_SERVER_ROOT_URL}
      GF_SMTP_ENABLED: null
      GF_SMTP_FROM_ADDRESS: null
      GF_SMTP_FROM_NAME: null
      GF_SMTP_HOST: null
      GF_SMTP_PASSWORD: null
      GF_SMTP_SKIP_VERIFY: null
      GF_SMTP_USER: null
      GF_SNAPSHOTS_EXTERNAL_SNAPSHOT_NAME: ${GF_SNAPSHOTS_EXTERNAL_SNAPSHOT_NAME}
      GF_SNAPSHOTS_EXTERNAL_SNAPSHOT_URL: ${GF_SNAPSHOTS_EXTERNAL_SNAPSHOT_URL}
      GRAFANA_UNIFIED_ALERTING_INTERFACE: eth2
    extra_hosts:
    - host.docker.internal:host-gateway
    hostname: replica-{{.Node.ID}}.grafana.internal
    healthcheck:
      test:
      - CMD-SHELL
      - wget -qO - --tries=1 --spider http://127.0.0.1:3000/api/health || exit 1
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 30s
    image: docker.io/grafana/grafana:11.3.1
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: 12m
    networks:
      grafana:
        aliases:
        - grafana.internal
      prometheus: null
      prometheus_gwnetwork: null
      public:
        aliases:
        - grafana.svc.cluster.local
    ports:
    - target: 3000
      published: 3000
      protocol: tcp
    volumes:
    - type: volume
      source: grafana-data
      target: /var/lib/grafana
    - type: volume
      source: grafana-logs
      target: /var/log/grafana
    - type: volume
      source: grafana-dashboards
      target: /etc/grafana/dashboards
    - type: volume
      source: grafana-provisioning-alerting
      target: /etc/grafana/provisioning/alerting
    - type: volume
      source: grafana-provisioning-dashboards
      target: /etc/grafana/provisioning/dashboards
    - type: volume
      source: grafana-provisioning-datasources
      target: /etc/grafana/provisioning/datasources
networks:
  grafana:
    attachable: true
  prometheus:
    name: prometheus
    external: true
  prometheus_gwnetwork:
    name: prometheus_gwnetwork
    external: true
  public:
    name: public
    external: true
volumes:
  grafana-dashboards: {}
  grafana-data: {}
  grafana-logs: {}
  grafana-provisioning-alerting: {}
  grafana-provisioning-config-reloader: {}
  grafana-provisioning-dashboards: {}
  grafana-provisioning-datasources: {}
configs:
  gf-dashboard-promstack-cadvisor:
    name: gf-dashboard-promstack-cadvisor-v1
    file: ./grafana/dashboards/promstack-cadvisor.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-dockerstack:
    name: gf-dashboard-promstack-dockerstack-v1
    file: ./grafana/dashboards/promstack-dockerstack.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-dockerswarm-nodes:
    name: gf-dashboard-promstack-dockerswarm-nodes-v1
    file: ./grafana/dashboards/promstack-dockerswarm-nodes.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-dockerswarm-services:
    name: gf-dashboard-promstack-dockerswarm-services-v1
    file: ./grafana/dashboards/promstack-dockerswarm-services.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-grafana-metrics:
    name: gf-dashboard-promstack-grafana-metrics-v1
    file: ./grafana/dashboards/promstack-grafana-metrics.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-node-exporter:
    name: gf-dashboard-promstack-node-exporter-v1
    file: ./grafana/dashboards/promstack-node-exporter.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-prometheus-stats:
    name: gf-dashboard-promstack-prometheus-stats-v1
    file: ./grafana/dashboards/promstack-prometheus-stats.json
    labels:
      io.grafana.dashboard: "true"
  gf-dashboard-promstack-prometheus-stats-v2:
    name: gf-dashboard-promstack-prometheus-stats-v2
    file: ./grafana/dashboards/promstack-prometheus-2-0-stats.json
    labels:
      io.grafana.dashboard: "true"
  gf-provisioning-dashboards:
    name: gf-provisioning-dashboards-v1
    file: ./grafana/provisioning/dashboards/grafana-dashboards.yml
  gf-provisioning-datasource-prometheus:
    name: gf-provisioning-datasource-prometheus-v1
    file: ./grafana/provisioning/datasources/prometheus.yml
    labels:
      io.grafana.provisioning.datasource: "true"
  gf-server-entrypoint:
    name: gf-server-entrypoint-v1
    file: ./grafana/docker-entrypoint-shim.sh
x-default-logging:
  driver: json-file
  options:
    max-file: "5"
    max-size: 12m
x-grafana-deploy:
  placement:
    constraints:
    - node.role == manager
    max_replicas_per_node: 1
  replicas: 1
x-grafana-provider-deploy:
  mode: global
  placement:
    constraints:
    - node.labels.services.promstack_grafana == true
x-grafana-provider-resources-constraints:
  limits:
    memory: 64M
x-grafana-reloader-deploy:
  mode: global
  placement:
    constraints:
    - node.labels.services.promstack_grafana_server == true
x-grafana-server-deploy:
  mode: global
  placement:
    constraints:
    - node.labels.services.promstack_grafana_provisioning_alerting_provider == true
    - node.labels.services.promstack_grafana_provisioning_dashboard_provider == true
    - node.labels.services.promstack_grafana_provisioning_datasource_provider == true
x-healthcheck:
  interval: 30s
  retries: 3
  start_period: 30s
  timeout: 10s
